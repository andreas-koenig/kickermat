variables:
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: 'kicker'
  GIT_STRATEGY: none

stages:
  - build
  - test
  - docs
  - release

# ### Define global cache rule
#
# Before building the project, all dependencies (e.g. third-party NuGet packages)
# must be restored. Jobs on GitLab.com's Shared Runners are executed on autoscaled machines.
#
# Each machine is used only once (for security reasons) and after that is removed.
# This means that, before every job, a dependency restore must be performed
# because restored dependencies are removed along with machines. Fortunately,
# GitLab provides cache mechanism with the aim of keeping restored dependencies
# for other jobs.
#
# This example shows how to configure cache to pass over restored
# dependencies for re-use.
#
# With global cache rule, cached dependencies will be downloaded before every job
# and then unpacked to the paths as specified below.
cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    #- '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    #- '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    - '$NUGET_PACKAGES_DIRECTORY'
  #
  # 'pull-push' policy means that latest cache will be downloaded (if it exists)
  # before executing the job, and a newer version will be uploaded afterwards.
  # Such a setting saves time when there are no changes in referenced third-party
  # packages.
  #
  # For example, if you run a pipeline with changes in your code,
  # but with no changes within third-party packages which your project is using,
  # then project restore will happen quickly as all required dependencies
  # will already be there â€” unzipped from cache.

  # 'pull-push' policy is the default cache policy, you do not have to specify it explicitly.
  policy: pull-push

# ### Restore project dependencies
#
# NuGet packages by default are restored to '.nuget/packages' directory
# in the user's home directory. That directory is out of scope of GitLab caching.
#
# To get around this, a custom path can be specified using the '--packages <PATH>' option
# for 'dotnet restore' command. In this example, a temporary directory is created
# in the root of project repository, so its content can be cached.
#
# Learn more about GitLab cache: https://docs.gitlab.com/ee/ci/caching/index.html
#before_script:
#  - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'

before_script:
  - 'cd $CI_PROJECT_DIR'
  - 'if ($CI_COMMIT_BRANCH -AND $CI_COMMIT_BRANCH -ne "") { $BRANCH=$CI_COMMIT_BRANCH } else { $BRANCH=$CI_DEFAULT_BRANCH }'
  - 'git fetch --all'
  - 'git checkout $BRANCH'
  - 'git pull origin $BRANCH'

build:
  stage: build
  tags:
    - build
  script:
    - 'cd $CI_PROJECT_DIR/$SOURCE_CODE_PATH/Webapp/ClientApp'
    - 'npm install'
    - 'ng build --prod'
    - '& nuget restore $CI_PROJECT_DIR/$SOURCE_CODE_PATH/kicker.sln'
    - '.$MSBUILD_DIR/msbuild $CI_PROJECT_DIR/$SOURCE_CODE_PATH/kicker.sln /t:Restore,Clean,Build /property:Configuration=Release'

tests:
  stage: test
  tags:
    - test
  script:
    - 'cd $CI_PROJECT_DIR/$SOURCE_CODE_PATH'
    - 'dotnet test --no-restore --logger "junit;LogFilePath=TestResult.xml"'
  artifacts:
    reports:
      junit: $CI_PROJECT_DIR/$SOURCE_CODE_PATH/UnitTesting/TestResult.xml

docs:
  stage: docs
  tags:
    - docs
  script:
    - 'docfx $CI_PROJECT_DIR/docs/docfx.json'
    - 'rmdir /s /q $KICKERMAT_HOME/www/docs'
    - 'mkdir $KICKERMAT_HOME/www/docs'
    - xcopy $CI_PROJECT_DIR/docs/_site $KICKERMAT_HOME/www/docs /E

releases:
  stage: release
  tags:
    - release
  script: 
    - 'tar -a -c -f $KICKERMAT_HOME/www/builds/release.zip'
